plugins {
    id "com.github.johnrengelman.shadow"
    id "com.jfrog.bintray"
    id "java"
    id "maven-publish"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "redisvelocity-plugin"
version = version

configurations {
    compileJava.dependsOn(":api:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
    jcenter()
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "velocity"
        url = "https://repo.velocitypowered.com/snapshots"
    }
}

dependencies {
    shadow(project(path: ":api")) {
        exclude(module: "slf4j-api")
    }
    annotationProcessor("com.velocitypowered:velocity-api:1.1.0-SNAPSHOT")
    compile("com.velocitypowered:velocity-api:1.1.0-SNAPSHOT")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")
    publications = ["mavenPublication"]
    pkg {
        repo = "maven"
        name = "RedisVelocity"
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/LXGaming/RedisVelocity.git"
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

bintrayUpload {
    onlyIf { System.getenv("BINTRAY_KEY") != null }
    onlyIf { System.getenv("BINTRAY_USER") != null }
    onlyIf { System.getenv("TRAVIS_BUILD_NUMBER") != null }
    onlyIf { System.getenv("TRAVIS_JOB_NUMBER") ==~ /\d+\.1$/ }
    onlyIf { System.getenv("TRAVIS_PULL_REQUEST") == "false" }
}

javadoc {
    failOnError = false
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    relocate("org.apache.commons.pool2", "io.github.lxgaming.redisvelocity.lib.commonspool2")
    relocate("redis.clients.jedis", "io.github.lxgaming.redisvelocity.lib.jedis")
    relocate("redis.clients.util", "io.github.lxgaming.redisvelocity.lib.jedisutil")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}